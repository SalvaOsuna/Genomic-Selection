p.adjust.method = "BY"
)
}
#Correlations
#2018
corr_plot(BLUPALL_info, c("Rust.18", "Rust.19", "Rust","Predicted","AUDPC_n", "PL50_n", "IF_n", "DS_n", "IT_n" ),
col.by = Material)
#2019
material19 <- select(R19_nc, c(5,6,7))
material19 <- material19[1:322,1:3]
BLUP19 <- as.data.frame(get_model_data(gen_alphaR19, "blupg"))
BLUP19 <-cbind(BLUP19, material19)
corr_plot(BLUP19, GDD_F, GDD_P,GDD_M, Biom_plant_g, yield_plant_g, Rust, col.by = Material)
#2020
material20 <- select(R20_nc, c(5,6,7))
material20 <- material20[1:324,1:3]
BLUP20 <- as.data.frame(get_model_data(gen_alphaR20, "blupg"))
BLUP20 <-cbind(BLUP20, material20)
corr_plot(BLUP20, GDD_DTF, GDD_DTP,GDD_M, Biom_plant_g, yield_plant_g, Rust,Asco, Oidio, col.by = Material)
#Boxplots
#2018
ggbetweenstats(x = Material, y = Rust.18, data = BLUPALL_info,
p.adjust.method = "holm", type = "p",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Species, y = AUDPC_n, data = BLUPALL_info,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
#2019
ggbetweenstats(x = Material, y = Rust, data = BLUP19,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Structure, y = Rust, data = BLUP19,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
#2020
ggbetweenstats(x = Material, y = Rust, data = BLUP20,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Species, y = BLUP, data = BLUPs_anova,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8)) +
coord_flip()
#intento de pca
blups.pca <- prcomp(BLUPALL_info[,c(40:42)], center = TRUE,scale. = TRUE)
summary(blups.pca)
ggbiplot(blups.pca, groups = BLUPALL_info$Species, ellipse = T)
ggplot(data = BLUPs_anova, aes(x = ENV, y = BLUP)) +
geom_boxplot(aes(fill = Material), width = 0.8) + theme_classic()
ggplot(data = BLUPs_anova, aes(x = Species, y = BLUP)) +
geom_boxplot(width = 0.8) + theme_classic()+ coord_flip()
#selected genotypes parameters (macro and microscopical)
colonies <- read.xlsx("U_pisi colonies.xlsx", sheet = "DEFINITIVO")
corr_plot(colonies)
#Efecto precocidad en roya:
BLUP <- read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = T, sheet = "BLUP_f+cc", )
head(BLUP)
corr_plot(BLUP, c("GDD_F", "GDD_P", "Rust", "Biomass","Yield", "AUDPC", "LP50", "IF", "IT", "DS"))
#genetic correlation:
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "Index_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
resp = Rust,
random = "gen", #Default
verbose = TRUE) #Default
get_model_data(mixed_modsdfsdf, "genpar")
install.packages("quant_gen")
Pheno_rust <- data.frame(Pheno_rust)
Pheno_rust$R19 <- as.numeric(Pheno_rust$R19)
Pheno_rust$AUDPC <- as.numeric(Pheno_rust$AUDPC)
Pheno_rust$IF <- as.numeric(Pheno_rust$IF)
Pheno_rust$IT <- as.numeric(Pheno_rust$IT)
Pheno_rust$DS <- as.numeric(Pheno_rust$DS)
Pheno_rust$I_cc_FAI <- as.numeric(Pheno_rust$I_cc_FAI)
corr_plot(Pheno_rust, c("R19", "AUDPC", "IF", "IT", "DS", "I_cc_FAI"))
0.30/(sqrt(0.76)*sqrt(0.67))
BLUPs_scaled <- data.frame(cbind(as.numeric(GEN),
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted)))
head(BLUPs_scaled)
cor(BLUPs_scaled)
corr_plot(BLUPs_scaled)
colnames_to_lower(.data = BLUPs_scaled)
colnames_to_lower(.data = BLUPs_scaled, c("GEN","2", "3","4","5","6","7","8"))
add_cols(.data = BLUPs_scaled, ... = c("GEN", "2", "3", "4", "5", "6", "7", "8"))
dim(BLUPs_scaled)
add_rows(.data = BLUPs_scaled, ... = c("GEN", "2", "3", "4", "5", "6", "7", "8"))
add_cols(.data = BLUPs_scaled, new_var = c("GEN", "2", "3", "4", "5", "6", "7", "8"))
concatenate(.data = BLUPs_scaled, new_var = c("GEN", "2", "3", "4", "5", "6", "7", "8"))
colnames(BLUPs_scaled) <- c("GEN", "2", "3", "4", "5", "6", "7", "8")
head(BLUPs_scaled)
colnames(BLUPs_scaled) <- c("GEN", "R18", "R19", "R20", "AUDPC", "DS", "IT", "IF")
corr_plot(BLUPs_scaled)
cor(BLUPs_scaled, method = "spearman")
gen_alphaRCC <-
gamem(RCC_nc,
GEN,
REP,
resp = c("AUDPC_T", "PL50_T", "IF_T", "IT_n", "DS_T"),
BLOCK)
get_model_data(gen_alphaRCC)
gen_alphaRCC <-
gamem(RCC_nc,
GEN,
REP,
resp = c("AUDPC_T", "PL50_T", "IF_T", "IT_n", "DS_T"))
get_model_data(gen_alphaRCC)
gen_alphaRCC <-
gamem(RCC_nc,
GEN,
REP,
resp = c("AUDPC_T", "PL50_T", "IF_T", "IT_n", "DS_T"),
BLOCK)
get_model_data(gen_alphaRCC)
BLUPLP50 <- gen_alphaRCC$PL50_T$BLUPgen %>%
arrange(GEN)
BLUPs_scaled <- data.frame(
cbind(as.numeric(GEN),
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
colnames(BLUPs_scaled) <- c("GEN", "R18", "R19", "R20", "AUDPC", "DS", "IT", "IF", "LP50")
BLUPs_scaled <- data.frame(
cbind(as.factor(GEN),
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
head(BLUPs_scaled)
colnames(BLUPs_scaled) <- c("GEN", "R18", "R19", "R20", "AUDPC", "DS", "IT", "IF", "LP50")
corr_plot(BLUPs_scaled)
U
BLUPs_scaled <- data.frame(
cbind(as.factor(GEN),
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
BLUPLP50
GEN
GEN <- as.factor(GEN)
BLUPs_scaled <- data.frame(
cbind(as.factor(GEN),
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
head(BLUPs_scaled)
BLUPLP50
BLUPIF
BLUPLP50
GEN <- as.vector(BLUPIF$GEN)
BLUPs_scaled <- data.frame(
cbind(GEN,
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
BLUPs_scaled <- data.frame(
cbind(GEN,
as.numeric(BLUP18_scaled$Predicted),
as.numeric(BLUP19_scaled$Predicted),
as.numeric(BLUP20_scaled$Predicted),
as.numeric(BLUPAUDPC$Predicted),
as.numeric(BLUPDS$Predicted),
as.numeric(BLUPIT$Predicted),
as.numeric(BLUPIF$Predicted),
as.numeric(BLUPLP50$Predicted)
))
head(BLUPs_scaled)
corr_plot(BLUPs_scaled)
colnames(BLUPs_scaled) <- c("GEN", "R18", "R19", "R20", "AUDPC", "DS", "IT", "IF", "LP50")
head(BLUPs_scaled)
BLUPs_scaled$R18 <- as.numeric(BLUPs_scaled$R18)
BLUPs_scaled$R19 <- as.numeric(BLUPs_scaled$R19)
BLUPs_scaled$R20 <- as.numeric(BLUPs_scaled$R20)
BLUPs_scaled$AUDPC <- as.numeric(BLUPs_scaled$AUDPC)
BLUPs_scaled$DS <- as.numeric(BLUPs_scaled$DS)
BLUPs_scaled$IT <- as.numeric(BLUPs_scaled$IT)
BLUPs_scaled$IF <- as.numeric(BLUPs_scaled$IF)
BLUPs_scaled$LP50 <- as.numeric(BLUPs_scaled$LP50)
corr_plot(BLUPs_scaled)
cor(BLUPs_scaled, method = "spearman")
cor(BLUPs_scaled[,2:9], method = "spearman")
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
write.xlsx(BLUPs_scaled, "BLUPs_scaled.xlsx")
res_ind <- waasb(x_scaled,
env = ENV,
gen = GEN,
rep = REP,
resp = c("Rust", "RustT"),
block = BLOCK,
mresp = "l",
verbose = FALSE)
res_ind <- waasb(x_scaled,
env = ENV,
gen = GEN,
rep = REP,
resp = c("Rust", "RustT"),
block = BLOCK,
mresp = c( "l", "l"),
verbose = FALSE)
res_ind$Rust$ESTIMATES
res_ind$RustT$ESTIMATES
model_indexes <- blup_indexes(res_ind)
model_indexes$Rust
gmd(model_indexes)
model_indexes$Rust
BLUP_field <- gmd(model_indexes)
write.xlsx(BLUP_field, "BLUP_field3.xlsx")
library(openxlsx)
library(rrBLUP)
############################################################################
###                                                                      ###
###                         DATA PREPARATION                             ###
###                                                                      ###
############################################################################
library(openxlsx)
#Within-Environment (i.e., stratified) GBLUP (model fitting
library('BGLR')
#Ahora voy a hacer lo mismo con GROAN intentando 50 rep. de 10 fold cross-validation:
library(GROAN)
# 3) Impute your data "filling" all the NA's (SVDI)
library(bcv)
GROAN.KI$SNPs
DArT <- as.matrix(read.table("./DArT.txt", header = T))
DArT[DArT == 1] <- 2 #change 1 to 2
DArT_GROAN <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_GROAN_SVDI <-
impute.svd(DArT_GROAN, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_GROAN_SVDI[DArT_GROAN_SVDI >= 1.5] <- 2
DArT_GROAN_SVDI[DArT_GROAN_SVDI <= 0.5] <- 0
DArT_GROAN_SVDI[DArT_GROAN_SVDI > 0.5 & DArT_GROAN_SVDI < 1.5]<- 1
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
#parece que hay que dejar los datos en formato {2, 1, 0}
DArT <- as.matrix(read.table("DArT.txt", header = T))
DArT[DArT == 1] <- 2 #change 1 to 2
DArT_GROAN <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_GROAN_SVDI <-
impute.svd(DArT_GROAN, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_GROAN_SVDI[DArT_GROAN_SVDI >= 1.5] <- 2
DArT_GROAN_SVDI[DArT_GROAN_SVDI <= 0.5] <- 0
DArT_GROAN_SVDI[DArT_GROAN_SVDI > 0.5 & DArT_GROAN_SVDI < 1.5]<- 1
DArT_GROAN_SVDI <- as.data.frame(DArT_GROAN_SVDI)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
#HERE WE GO AGAIN. NOW WITH SCALED FIELD DATA####
R_scaled <- read.xlsx("BLUPs_scaled.xlsx")
head(R_scaled)
head(DArT_GROAN_SVDI)
head(DArT_GROAN_SVDI[1:10,1:10])
head(DArT_GROAN_SVDI[1:20,1:20])
head(R_scaled)
nds.R18 = createNoisyDataset(
name = 'R18',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R18
)
nds.R19 = createNoisyDataset(
name = 'R19',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R19
)
nds.R20 = createNoisyDataset(
name = 'R20',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R20
)
wb = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
res_18vs19.20 = GROAN.run(
nds = nds.18, wb = wb,
nds.test = list(nds.19, nds.20)
)
print(res_18vs19.20[,c('dataset.train', 'dataset.test', 'pearson')])
nds.R18 = createNoisyDataset(
name = 'R18',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R18
)
nds.R19 = createNoisyDataset(
name = 'R19',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R19
)
nds.R20 = createNoisyDataset(
name = 'R20',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$R20
)
wb = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
res_18vs19.20 = GROAN.run(
nds = nds.18, wb = wb,
nds.test = list(nds.19, nds.20)
)
print(res_18vs19.20[,c('dataset.train', 'dataset.test', 'pearson')])
res_18vs19.20 = GROAN.run(
nds = nds.R18, wb = wb,
nds.test = list(nds.R19, nds.R20)
)
print(res_18vs19.20[,c('dataset.train', 'dataset.test', 'pearson')])
View(res_18vs19.20)
res_18vs19.20 %>%
group_by(c('dataset.train', 'dataset.test', 'pearson')) %>%
summarise("meanPA" = mean(pearson))
res_18vs19.20 %>%
group_by(c('dataset.train', 'dataset.test', 'pearson')) %>%
summarise("meanPA" = mean("pearson"))
res_18vs19.20 %>%
group_by('dataset.train', 'dataset.test', 'pearson') %>%
summarise("meanPA" = mean("pearson"))
res_18vs19.20 %>%
group_by(dataset.train, dataset.test, pearson) %>%
summarise("meanPA" = mean("pearson"))
res_18vs19.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean("pearson"))
res_18vs19.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_18vs19.20)
nds.R18
res_19vs18.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_19vs18.20)
res_20vs18.19 = GROAN.run(
nds = nds.R20, wb = wb,
nds.test = list(nds.R18, nds.R19)
)
res_20vs18.19 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_20vs18.19)
res_19vs18.20 = GROAN.run(
nds = nds.R19, wb = wb,
nds.test = list(nds.R18, nds.R20)
)
res_19vs18.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_19vs18.20)
#create the same wb with BL:
wb2 <- createWorkbench(folds = 10, reps = 50, regressor = "Bayessian Lasso", type = "BL")
print(wb2)
#create the same wb with BL:
wb2 <- createWorkbench(folds = 10, reps = 50, regressor = "Bayessian Lasso", type = "BL")
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
reps = 50,
folds = 10)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
reps = 50,
folds = 10)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
reps = 50,
folds = 10,
stratified = F)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
reps = 50,
folds = 10,
stratified = T)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
reps = 50,
folds = 10,
stratified = T)
wb2 = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.BGLR(type = "BL"), regressor.name = 'BL'
)
wb2 = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.BGLR, regressor.name = 'BL', type = "BL"
)
res_18vs19.20bl = GROAN.run(
nds = nds.R18, wb = wb2,
nds.test = list(nds.R19, nds.R20)
)
res_18vs19.20bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_18vs19.20bl)
res_19vs18.20bl = GROAN.run(
nds = nds.R19, wb = wb2,
nds.test = list(nds.R18, nds.R20)
)
res_19vs18.20bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_19vs18.20bl)
res_20vs18.19bl = GROAN.run(
nds = nds.R20, wb = wb2,
nds.test = list(nds.R18, nds.R19)
)
res_20vs18.19bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_20vs18.19bl)
plotResult(res_19vs18.20bl)
res_19vs18.20bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
res_20vs18.19bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
res_18vs19.20bl %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
res_18vs19.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
res_19vs18.20 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
res_20vs18.19 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
head(BLUPs_scaled)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
#HERE WE GO AGAIN. NOW WITH SCALED FIELD DATA####
R_scaled <- read.xlsx("BLUPs_scaled.xlsx")
head(R_scaled)
head(DArT_GROAN_SVDI[1:20,1:20])
corr_plot(R_scaled)
get_model_data(mod_R18_scaled)
get_model_data(mod_R19_scaled)
get_model_data(mod_R20_scaled)
res_ind$RustT$ESTIMATES
head(R_scaled)
get_model_data(mixed_mod_x_scaled)
#create the same wb with GBLUP:
res_summary1 <- rbind(res_18vs19.20, res_18vs19.20bl, res_19vs18.20, res_19vs18.20bl,
res_20vs18.19, res_20vs18.19bl)
plotResult(res_summary1)
write.xlsx(res_summary1, "acrossENV_BLrr_scaled.xlsx")
head(R_scaled)
