covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV1_mega[i,1] <- cor(Wild[test_Wild,19], res_$predictions[198:217])
#crear test de Cultivar que sea el 10% de Landrace (=20 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.62, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 20 huecos (NA) a la matriz Landrace, que es lo que se va a predecir
NA_mat_20 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Landrace_Cultivar_CV1 <- rbind(mega_Landrace, NA_mat_20) #training
#Añadir la info genotípica de las 20 entradas (Wild) a toda la info genotípica de Landrace
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Landrace_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Landrace_Cultivar_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV1_mega[i,2] <- cor(Cultivar[test_Cultivar,19], res_$predictions[198:217])
} #megaENV: Landrace vs Cultivar; Landrace vs Wild [CV0]
boxplot(summary_Landrace_CV1_mega)
for (i in 1:cycles) {
#crear test de Wild que sea el 10% de Cultivar (=6 entradas)
train_Wild <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.88, digits = 0)))
test_Wild <- setdiff(1:length(Wild[,1]), train_Wild)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Wild), ncol = 1)
Cultivar_Wild_CV1 <- rbind(mega_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Wild) a toda la info genotípica de Cultivar
geno_test_wild <-  Wild_DArT[test_Wild,]
geno_training <- rbind(Cultivar_DArT,geno_test_wild)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Wild_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV1_mega[i,1] <- cor(Wild[test_Wild,19], res_$predictions[54:59])
#crear test de Landrace que sea el 10% de Cultivar (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Cultivar_Landrace_CV1 <- rbind(mega_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Cultivar
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Cultivar_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Landrace_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV1_mega[i,2] <- cor(Landrace[test_Landrace,19], res_$predictions[54:59])
} #megaENV: Cultivar vs Landrace; Cultivar vs Wild [CV0]
boxplot(summary_Cultivar_CV1_mega)
for (i in 1:cycles) {
#crear test de Landrace que sea el 10% de Wild (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Wild_Landrace_CV1 <- rbind(mega_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Wild
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Wild_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Landrace_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV1_mega[i,1] <- cor(Landrace[test_Landrace,19], res_$predictions[52:57])
#crear test de Cultivar que sea el 10% de Wild (=6 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.88, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Wild_Cultivar_CV1 <- rbind(mega_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Cultivar) a toda la info genotípica de Wild
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Wild_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Cultivar_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV1_mega[i,2] <- cor(Cultivar[test_Cultivar,19], res_$predictions[52:57])
} #megaENV: Wild vs Landrace; Wild vs Cultivar [CV0]
boxplot(summary_Wild_CV_mega)
summary_material_CV1_mega <- data.frame(Landrace_Wild = summary_Landrace_CV1_mega[,1], Landrace_Cultivar = summary_Landrace_CV1_mega[,2],
Cultivar_Wild = summary_Cultivar_CV1_mega[,1], Cultivar_Landrace = summary_Cultivar_CV1_mega[,2],
Wild_Landrace = summary_Wild_CV_mega[,1], Wild_Cultivar = summary_Wild_CV_mega[,2])
desc_stat(summary_material_CV1_mega)
head(Pheno_material[1:10, 1:10])
head(R_scaled)
#ENV MEGA ENVironment:
summary_Landrace_CV1_mega <- matrix(nrow = cycles, ncol = 2)
summary_Cultivar_CV1_mega <- matrix(nrow = cycles, ncol = 2)
summary_Wild_CV1_mega <- matrix(nrow = cycles, ncol = 2)
for (i in 1:cycles) {
#crear test de Wild que sea el 10% de Landrace (=20 entradas)
train_Wild <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.6, digits = 0)))
test_Wild <- setdiff(1:length(Wild[,1]), train_Wild)
#Añadir 20 huecos (NA) a la matriz Landrace, que es lo que se va a predecir
NA_mat_20 <- matrix(nrow = length(test_Wild), ncol = 1)
Landrace_Wild_CV1 <- rbind(mega_Landrace, NA_mat_20) #training
#Añadir la info genotípica de las 20 entradas (Wild) a toda la info genotípica de Landrace
geno_test_wild <-  Wild_DArT[test_Wild,]
geno_training <- rbind(Landrace_DArT,geno_test_wild)
res_ = phenoRegressor.rrBLUP(phenotypes = Landrace_Wild_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV1_mega[i,1] <- cor(Wild[test_Wild,20], res_$predictions[198:217])
#crear test de Cultivar que sea el 10% de Landrace (=20 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.62, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 20 huecos (NA) a la matriz Landrace, que es lo que se va a predecir
NA_mat_20 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Landrace_Cultivar_CV1 <- rbind(mega_Landrace, NA_mat_20) #training
#Añadir la info genotípica de las 20 entradas (Wild) a toda la info genotípica de Landrace
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Landrace_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Landrace_Cultivar_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV1_mega[i,2] <- cor(Cultivar[test_Cultivar,20], res_$predictions[198:217])
} #megaENV: Landrace vs Cultivar; Landrace vs Wild [CV0]
boxplot(summary_Landrace_CV1_mega)
for (i in 1:cycles) {
#crear test de Wild que sea el 10% de Cultivar (=6 entradas)
train_Wild <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.88, digits = 0)))
test_Wild <- setdiff(1:length(Wild[,1]), train_Wild)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Wild), ncol = 1)
Cultivar_Wild_CV1 <- rbind(mega_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Wild) a toda la info genotípica de Cultivar
geno_test_wild <-  Wild_DArT[test_Wild,]
geno_training <- rbind(Cultivar_DArT,geno_test_wild)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Wild_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV1_mega[i,1] <- cor(Wild[test_Wild,20], res_$predictions[54:59])
#crear test de Landrace que sea el 10% de Cultivar (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Cultivar_Landrace_CV1 <- rbind(mega_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Cultivar
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Cultivar_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Landrace_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV1_mega[i,2] <- cor(Landrace[test_Landrace,20], res_$predictions[54:59])
} #megaENV: Cultivar vs Landrace; Cultivar vs Wild [CV0]
boxplot(summary_Cultivar_CV1_mega)
for (i in 1:cycles) {
#crear test de Landrace que sea el 10% de Wild (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Wild_Landrace_CV1 <- rbind(mega_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Wild
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Wild_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Landrace_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV1_mega[i,1] <- cor(Landrace[test_Landrace,20], res_$predictions[52:57])
#crear test de Cultivar que sea el 10% de Wild (=6 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.88, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Wild_Cultivar_CV1 <- rbind(mega_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Cultivar) a toda la info genotípica de Wild
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Wild_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Cultivar_CV1,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV1_mega[i,2] <- cor(Cultivar[test_Cultivar,20], res_$predictions[52:57])
} #megaENV: Wild vs Landrace; Wild vs Cultivar [CV0]
boxplot(summary_Wild_CV1_mega)
summary_material_CV1_mega <- data.frame(Landrace_Wild = summary_Landrace_CV1_mega[,1], Landrace_Cultivar = summary_Landrace_CV1_mega[,2],
Cultivar_Wild = summary_Cultivar_CV1_mega[,1], Cultivar_Landrace = summary_Cultivar_CV1_mega[,2],
Wild_Landrace = summary_Wild_CV1_mega[,1], Wild_Cultivar = summary_Wild_CV1_mega[,2])
desc_stat(summary_material_CV1_mega)
#ENV controlled condition (INDEX) to predict mega ENV:
summary_Landrace_CV2 <- matrix(nrow = cycles, ncol = 2)
summary_Cultivar_CV2 <- matrix(nrow = cycles, ncol = 2)
summary_Wild_CV2 <- matrix(nrow = cycles, ncol = 2)
for (i in 1:cycles) {
#crear test de Wild que sea el 10% de Landrace (=20 entradas)
train_Wild <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.6, digits = 0)))
test_Wild <- setdiff(1:length(Wild[,1]), train_Wild)
#Añadir 20 huecos (NA) a la matriz Landrace, que es lo que se va a predecir
NA_mat_20 <- matrix(nrow = length(test_Wild), ncol = 1)
Landrace_Wild_CV2 <- rbind(Index_Landrace, NA_mat_20)
#Añadir la info genotípica de las 20 entradas (Wild) a toda la info genotípica de Landrace
geno_test_wild <-  Wild_DArT[test_Wild,]
geno_training <- rbind(Landrace_DArT,geno_test_wild)
res_ = phenoRegressor.rrBLUP(phenotypes = Landrace_Wild_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV2[i,1] <- cor(Wild[test_Wild,20], res_$predictions[198:217])
#crear test de Cultivar que sea el 10% de Landrace (=20 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.62, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 20 huecos (NA) a la matriz Landrace, que es lo que se va a predecir
NA_mat_20 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Landrace_Cultivar_CV2 <- rbind(Index_Landrace, NA_mat_20)
#Añadir la info genotípica de las 20 entradas (Wild) a toda la info genotípica de Landrace
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Landrace_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Landrace_Cultivar_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV2[i,2] <- cor(Cultivar[test_Cultivar,20], res_$predictions[198:217])
} #Index: Landrace vs Cultivar; Landrace vs Wild [CV2]
boxplot(summary_Landrace_CV2)
for (i in 1:cycles) {
#crear test de Wild que sea el 10% de Cultivar (=6 entradas)
train_Wild <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.88, digits = 0)))
test_Wild <- setdiff(1:length(Wild[,1]), train_Wild)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Wild), ncol = 1)
Cultivar_Wild_CV2 <- rbind(Index_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Wild) a toda la info genotípica de Cultivar
geno_test_wild <-  Wild_DArT[test_Wild,]
geno_training <- rbind(Cultivar_DArT,geno_test_wild)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Wild_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV2[i,1] <- cor(Wild[test_Wild,20], res_$predictions[54:59])
#crear test de Landrace que sea el 10% de Cultivar (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Cultivar, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Cultivar_Landrace_CV2 <- rbind(Index_Cultivar, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Cultivar
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Cultivar_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Cultivar_Landrace_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV2[i,2] <- cor(Landrace[test_Landrace,20], res_$predictions[54:59])
} #Index: Cultivar vs Landrace; Cultivar vs Wild [CV2]
boxplot(summary_Cultivar_CV2)
for (i in 1:cycles) {
#crear test de Landrace que sea el 10% de Wild (=6 entradas)
train_Landrace <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.97, digits = 0)))
test_Landrace <- setdiff(1:length(Landrace[,1]), train_Landrace)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Landrace), ncol = 1)
Wild_Landrace_CV2 <- rbind(Index_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Landrace) a toda la info genotípica de Wild
geno_test_Landrace <-  Landrace_DArT[test_Landrace,]
geno_training <- rbind(Wild_DArT,geno_test_Landrace)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Landrace_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV2[i,1] <- cor(Landrace[test_Landrace,20], res_$predictions[52:57])
#crear test de Cultivar que sea el 10% de Wild (=6 entradas)
train_Cultivar <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.88, digits = 0)))
test_Cultivar <- setdiff(1:length(Cultivar[,1]), train_Cultivar)
#Añadir 6 huecos (NA) a la matriz Wild, que es lo que se va a predecir
NA_mat_6 <- matrix(nrow = length(test_Cultivar), ncol = 1)
Wild_Cultivar_CV2 <- rbind(Index_Wild, NA_mat_6)
#Añadir la info genotípica de las 6 entradas (Cultivar) a toda la info genotípica de Wild
geno_test_Cultivar <-  Cultivar_DArT[test_Cultivar,]
geno_training <- rbind(Wild_DArT,geno_test_Cultivar)
res_ = phenoRegressor.rrBLUP(phenotypes = Wild_Cultivar_CV2,
genotypes = geno_training,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV2[i,2] <- cor(Cultivar[test_Cultivar,20], res_$predictions[52:57])
} #Index: Wild vs Landrace; Wild vs Cultivar [CV2]
boxplot(summary_Wild_CV2)
summary_material_CV2 <- data.frame(Landrace_Wild = summary_Landrace_CV2[,1], Landrace_Cultivar = summary_Landrace_CV2[,2],
Cultivar_Wild = summary_Cultivar_CV2[,1], Cultivar_Landrace = summary_Cultivar_CV2[,2],
Wild_Landrace = summary_Wild_CV2[,1], Wild_Cultivar = summary_Wild_CV2[,2])
desc_stat(summary_material_CV2)
desc_stat(summary_material_CV1_mega)
desc_stat(sumary_material_CV0)
desc_stat(summary_material_CV2)
library(readxl)
library(openxlsx)
library(metan)
library(ggstatsplot)
library(tidyverse)
library(GGEBiplots)
library(multcompView)
dim(Pheno_rust)
head(R_scaled)
corr_plot(R_scaled)
corr_plot(as.data.frame(R_scaled))
R_scaled <- read.xlsx("BLUPs_scaled.xlsx") #load phenotypes
head(R_scaled)
corr_plot(as.data.frame(R_scaled))
corr_plot(R_scaled, R18,R19,R20,AUDPC,DS,IT,IF,I_cc_FAI,Rust)
corr_plot(R_scaled, R18,R19,R20,Rust, AUDPC,DS,IT,IF,I_cc_FAI,
col.by = Material)
ggplot(R_scaled, aes(x = Material, y = Index)) +
geom_boxplot()
head(R_scaled)
ggplot(R_scaled, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
ggplot(R_scaled, aes(x = Material, y = Rust)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(Material == "Landraces")
Material_3
Material_3 <- R_scaled %>%
filter(Material == c("Landraces", "Wild", "Cultivar"))
Material_3
Material_3 <- R_scaled %>%
filter(Material == "Landraces" & Material == "Wild" & Material == "Cultivar")
Material_3
Material_3 <- R_scaled %>%
filter(Material == "Landraces" & "Wild" & "Cultivar")
Material_3 <- R_scaled %>%
filter(Material == "Landraces" , Material == "Wild" , Material == "Cultivar")
Material_3
P_Unknown_Bline
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline))
Material_3
View(Material_3)
ggplot(R_scaled, aes(x = Material_3, y = I_cc_FAI)) +
geom_boxplot()
class(Material_3)
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
View(Material_3)
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 308))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 307))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 309))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 287))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 286))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline, 288))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled %>%
filter(!row_number() %in% c(P_Unknown_Bline))
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled[!(R_scaled$Material=="Unknown" & R_scaled$Material=="Breeding Line"),]
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
Material_3 <- R_scaled[!(R_scaled$Material=="Unknown" | R_scaled$Material=="Breeding Line"),]
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot()
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot()
ggbetweenstats(x = Material, y = Rust, data = Material_3,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Material, y = I_cc_FAI, data = Material_3,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Material, y = I_cc_FAI, data = Material_3,
p.adjust.method = "none", type = "np",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 3, tip_length = 0.01)) +
theme(text = element_text(size = 10), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Material, y = Rust, data = Material_3,
p.adjust.method = "bonferroni", type = "p",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Material, y = I_cc_FAI, data = Material_3,
p.adjust.method = "bonferroni", type = "p",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 2, tip_length = 0.01)) +
theme(text = element_text(size = 10), plot.subtitle = element_text(size=10))
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot() +
theme_classic()
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot(aes(fill = Material)) +
theme_classic()
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot(aes(fill = Material)) +
theme_classic() +
legend. position=”none”
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot(aes(fill = Material)) +
theme_classic(legend. position="none")
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot(aes(fill = Material)) +
theme_classic(legend.position="none")
ggplot(Material_3, aes(x = Material, y = Rust)) +
geom_boxplot(aes(fill = Material)) +
theme_classic() +
theme(legend.position = "none")
ggplot(Material_3, aes(x = Material, y = I_cc_FAI)) +
geom_boxplot(aes(fill = Material)) +
theme_classic() +
theme(legend.position = "none")
ggbetweenstats(x = Material, y = Rust, data = Material_3,
p.adjust.method = "bonferroni", type = "p",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 1.5, tip_length = 0.01)) +
theme(text = element_text(size = 8), plot.subtitle = element_text(size=8))
ggbetweenstats(x = Material, y = I_cc_FAI, data = Material_3,
p.adjust.method = "bonferroni", type = "p",
bf.message = FALSE, var.equal = F,
ggsignif.args = list(textsize = 2, tip_length = 0.01)) +
theme(text = element_text(size = 10), plot.subtitle = element_text(size=10))
#figures:
CV0_all <- read.xlsx("field&MEGAenv_traits_predictorsDArT.xlsx", sheet = "CV0", colNames = T)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
#figures:
CV0_all <- read.xlsx("results/field&MEGAenv_traits_predictorsDArT.xlsx", sheet = "CV0", colNames = T)
ggplot(CV0_all, aes(x = dataset.train, y = pearson)) +
geom_boxplot(aes(fill = regressor)) +
theme_classic()
Landrace
summary_Landrace_CV2_I <- matrix(nrow = cycles, ncol = 2)
cycles = 500
for (i in 1:cycles) {
train <- as.matrix(sample(1:length(Landrace[,1]), round(length(Landrace[,1])*0.9, digits = 0)))
test <- setdiff(1:length(Landrace[,1]), train)
Index_Landrace <- Landrace[,19]
Index_Landrace[test] <- NA
res_Index_Landrace_CV2_I = phenoRegressor.rrBLUP(phenotypes = Index_Landrace,
genotypes = Landrace_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV2_I[i, 1] <- cor(Landrace[test,20], res_Index_Landrace_CV2_I$predictions[test])
mega_Landrace <- Landrace[,20]
mega_Landrace[test] <- NA
res_mega_Landrace_CV2_I = phenoRegressor.rrBLUP(phenotypes = mega_Landrace,
genotypes = Landrace_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Landrace_CV2_I[i, 2] <-cor(Landrace[test,19], res_mega_Landrace_CV2_I$predictions[test])
}
summary_Cultivar_CV2_I <- matrix(nrow = cycles, ncol = 2)
cycles = 500
for (i in 1:cycles) {
train <- as.matrix(sample(1:length(Cultivar[,1]), round(length(Cultivar[,1])*0.9, digits = 0)))
test <- setdiff(1:length(Cultivar[,1]), train)
Index_Cultivar <- Cultivar[,19]
Index_Cultivar[test] <- NA
res_Index_Cultivar_CV2_I = phenoRegressor.rrBLUP(phenotypes = Index_Cultivar,
genotypes = Cultivar_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV2_I[i, 1] <- cor(Cultivar[test,20], res_Index_Cultivar_CV2_I$predictions[test])
mega_Cultivar <- Cultivar[,20]
mega_Cultivar[test] <- NA
res_mega_Cultivar_CV2_I = phenoRegressor.rrBLUP(phenotypes = mega_Cultivar,
genotypes = Cultivar_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Cultivar_CV2_I[i, 2] <-cor(Cultivar[test,19], res_mega_Cultivar_CV2_I$predictions[test])
}
summary_Wild_CV2_I <- matrix(nrow = cycles, ncol = 2)
cycles = 500
for (i in 1:cycles) {
train <- as.matrix(sample(1:length(Wild[,1]), round(length(Wild[,1])*0.9, digits = 0)))
test <- setdiff(1:length(Wild[,1]), train)
Index_Wild <- Wild[,19]
Index_Wild[test] <- NA
res_Index_Wild_CV2_I = phenoRegressor.rrBLUP(phenotypes = Index_Wild,
genotypes = Wild_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV2_I[i, 1] <- cor(Wild[test,20], res_Index_Wild_CV2_I$predictions[test])
mega_Wild <- Wild[,20]
mega_Wild[test] <- NA
res_mega_Wild_CV2_I = phenoRegressor.rrBLUP(phenotypes = mega_Wild,
genotypes = Wild_DArT,
covariances = NULL,
extraCovariates = NULL)
summary_Wild_CV2_I[i, 2] <-cor(Wild[test,19], res_mega_Wild_CV2_I$predictions[test])
}
summary_Cultivar_CV2_I <- data.frame(Index = summary_Cultivar_CV2_I[,1], megaENV = summary_Cultivar_CV2_I[,2])
head(summary_Cultivar_CV2_I)
sumary_material_CV2_I <- data.frame(Index_Cultivar = summary_Cultivar_CV2_I[,1], megaENV_Cultivar = summary_Cultivar_CV2_I[,2],
Index_Landrace = summary_Landrace_CV2_I[,1], megaENV_Landrace = summary_Landrace_CV2_I[,2],
Index_Wild = summary_Wild_CV2_I[,1], megaENV_Wild = summary_Wild_CV2_I[,2])
boxplot(sumary_material_CV2_I)
desc_stat(sumary_material_CV2_I)
