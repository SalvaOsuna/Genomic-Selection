library(openxlsx)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
res_summary2 <- read.xlsx("acrossENV_BLrr_DS_Index_mega.xlsx")
library(readxl)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
res_summary2 <- read.xlsx("acrossENV_BLrr_DS_Index_mega.xlsx")
View(res_summary2)
res_summary2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
library(tidyverse)
res_summary2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
#HERE WE GO AGAIN. NOW WITH SCALED FIELD DATA####
R_scaled <- read.xlsx("BLUPs_scaled.xlsx")
head(R_scaled)
#Ahora voy a hacer lo mismo con GROAN intentando 50 rep. de 10 fold cross-validation:
library(GROAN)
library(bcv)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
DArT <- as.matrix(read.table("DArT.txt", header = T))
DArT[DArT == 1] <- 2 #change 1 to 2
DArT_GROAN <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_GROAN_SVDI <-
impute.svd(DArT_GROAN, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_GROAN_SVDI[DArT_GROAN_SVDI >= 1.5] <- 2
DArT_GROAN_SVDI[DArT_GROAN_SVDI <= 0.5] <- 0
DArT_GROAN_SVDI[DArT_GROAN_SVDI > 0.5 & DArT_GROAN_SVDI < 1.5]<- 1
DArT_GROAN_SVDI <- as.data.frame(DArT_GROAN_SVDI)
head(DArT_GROAN_SVDI[1:20,1:20])
#Within-Environment (i.e., stratified) GBLUP (model fitting
library('BGLR')
head(R_scaled)
wb = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
wb2 = addRegressor(wb, regressor = phenoRegressor.BGLR, type = "BL", regressor.name = "BL"
)
wb2
#Matrix design
geno <- data.frame(read.xlsx("GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
wb3 = addRegressor(wb2, regressor = phenoRegressor.BGLR(covariances = geno), , regressor.name = "GBLUP",
type = "RKHS")
nds.mega = createNoisyDataset(
name = 'MegaENV',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$Rust,
covariance = geno
)
wb3 = addRegressor(wb2, regressor = phenoRegressor.BGLR, , regressor.name = "GBLUP",
type = "RKHS")
wb3 = addRegressor(wb2, regressor = phenoRegressor.BGLR, regressor.name = "GBLUP",
type = "RKHS")
wb3
nds.mega
res_mega = GROAN.run(nds = nds.mega, wb = wb3)
plotResult(res.mega)
res_meta %>%
group_by(regressor) %>%
summarise("meanPA" = mean(pearson))
wb2
nds.mega = createNoisyDataset(
name = 'MegaENV',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$Rust
)
nds.mega.kinship = createNoisyDataset(
name = 'MegaENV',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$Rust,
covariance = geno
)
wb3 = createWorkbench(folds = 10, reps = 50, stratified = FALSE, outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
regressor = phenoRegressor.BGLR, regressor.name = 'GBLUP', type = "RKHS")
wb3
res_mega_GBLUP = GROAN.run(nds = nds.mega.kinship, wb = wb3)
class(geno)
geno <- as.matrix(geno)
class(geno)
nds.mega.kinship = createNoisyDataset(
name = 'MegaENV',
genotypes = DArT_GROAN_SVDI,
phenotypes = R_scaled$Rust,
covariance = geno
)
wb3 = createWorkbench(folds = 10, reps = 50, stratified = FALSE, outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
regressor = phenoRegressor.BGLR, regressor.name = 'GBLUP', type = "RKHS")
res_mega_GBLUP = GROAN.run(nds = nds.mega.kinship, wb = wb3)
res_mega = GROAN.run(nds = nds.mega, wb = wb2)
plotResult(res.mega)
res_meta %>%
group_by(regressor) %>%
summarise("meanPA" = mean(pearson))
res_mega_GBLUP = GROAN.run(nds = nds.mega.kinship, wb = wb3)
plotResult(res_mega_GBLUP)
res_mega_GBLUP %>%
group_by(regressor) %>%
summarise("meanPA" = mean(pearson))
plotResult(res_mega)
res_mega_summary <- rbind(res_mega, res_mega_GBLUP)
plotResult(res_mega_summary)
res_mega_summary %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res_summary2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res_summary3 <- rbind(res_summary2, res_mega_summary)
View(res_mega_summary)
res_summary3 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
write.xlsx(res_summary3, "acrossENV_BLrr_DS_Index_mega.xlsx", overwrite = T)
